package main

import (
	"encoding/json"
	"io/ioutil"
	"os"
	"strings"
)

type Spec struct {
	TypeDef []TypeDef `json:"TypeDef"`
}

type TypeDef struct {
	Type          string  `json:"type"`
	Extends       string  `json:"extends"`
	Fields        []Field `json:"fields,omitempty"`
	Discriminator int     `json:"discriminator,omitempty"`
	Doc           string  `json:"doc,omitempty"`
}

type Field struct {
	Name string `json:"name"`
	Type string `json:"type"`
	Doc  string `json:"doc,omitempty"`
}

func escape(str string) string {
	str = strings.Replace(str, "^", "\\textasciicircum", -1)
	str = strings.Replace(str, "#", "\\#", -1)
	return str
}

func genTex(spec *Spec) {
	sb := &strings.Builder{}
	sb.WriteString("% DO NOT MODIFY, GENERATED BY genformat.go\n")
	sb.WriteString("\\section{On-disk format specification}\n")
	for _, def := range spec.TypeDef {
		sb.WriteString("\\subsection{" + def.Type + "}\n")
		sb.WriteString(escape(def.Doc) + "\n")
		sb.WriteString("Fields\n")

		sb.WriteString("\\begin{table}[htp]\n")
		sb.WriteString("\\centering\n")
		sb.WriteString("\\begin{tabular}{l|l|l}\n")
		for _, field := range def.Fields {
			sb.WriteString(field.Name)
			sb.WriteString(" & ")
			sb.WriteString(field.Type)
			sb.WriteString(" & ")
			sb.WriteString(escape(field.Doc))
			sb.WriteString("\\\\ \\hline\n")

		}
		sb.WriteString("\\end{tabular}\n")
		sb.WriteString("\\end{table}\n")
	}
	err := ioutil.WriteFile("format.tex", []byte(sb.String()), os.ModePerm)
	if err != nil {
		panic(err)
	}
}

func main() {
	data, err := ioutil.ReadFile("format.json")
	if err != nil {
		panic(err)
	}
	spec := &Spec{}
	err = json.Unmarshal(data, spec)
	if err != nil {
		panic(err)
	}
	genTex(spec)
}
